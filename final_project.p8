pico-8 cartridge // http://www.pico-8.com
version 18
__lua__
--initial variables etc

function _init()
	updates = 0
	checkx = 0
	checky = 0
	--constants

	g_friction = .95
	a_friction = .97
	gravity = 0.25

	--flags
	solid_flag = 1
	wall_flag = 2
	deadly_flag = 3
	power_flag = 4
	goal_flag = 7


	sprites = {
		standing = 1,
		running = 3,
		jumping = 18,
		falling = 17,
		charge = 5,
		sliding = 19,
		spawn = 32,
		sand = 77,
		cloud = 101
	}

	--global vars
	screen = "controls"

	world = 2
	level = 1

	mapx_ofst = 0
	mapy_ofst = 0
	bnp = false
	b_time = 0
	wall_x = 0

	part_tick = 0
	jump_from = ""
	time_held = 0


	basex = 8
	basey = 104
	classes = {}

	plr = {
		--instance vars
		controllable = true,
		ticker = 0,
		x = 8,
		y = 104,
		w = 8,
		h = 8,
		dx = 0,
		dy = 0,
		weighted = true,
		is_player = true,
		max_dy = 3,
		max_dx = 4,
		sprite = sprites.standing,
		on_ground = true,
		face_r = true,
		j_left = 1,
		max_jump = 1,
		wall_jumps = 1,
		has_charge = true,
		has_grapple = false,
		grapple_dir = "right",
		grapple = false,
		charge_j = false,
		on_wall = false,
		clr = "blue",
		respawning = true,
		go_next = false,
		grapple = false,
		grapple_tick = 0,
		grapple_x = 0,
		grapple_y = 0,
		grapple_dir = {0,0},
		g_success = false,
		has_double = true,
		--functions

		respawn = function()
			plr.respawning = true
			plr.controllable = false
			plr.x = basex
			plr.y = basey
			plr.dy = 0
			plr.dx = 0
			plr.ticker = 0
		end,

		update = function()
			if plr.y > 128 then
				plr.respawn()
			end
			if plr.controllable then
				btn_vector = {0,0,0,0}
				if btn(0) then
					btn_vector[1] = 1
					if jump_from == "right" then
						plr.wall_jumps = 1
					end
					if btn(5) then
						plr.dx-=.25
					end
					plr.dx-=.25
				end
				if btn(1) then
					btn_vector[2] = 1
					if jump_from == "left" then
						plr.wall_jumps = 1
					end
					if btn(5) then
						plr.dx+=.25
					end
					plr.dx +=.25
				end
				--btn 2 is the up arrow
				if btn(2) then
					btn_vector[3] = 1
					if plr.j_left > 0 and not bnp then
						plr.on_wall = false
						plr.dy=-1.5
						plr.on_ground = false
						plr.j_left -=1
						bnp = true
					elseif bnp and b_time < 6 then
						b_time +=1
						plr.dy=-2
					end
				else
					bnp = false
					b_time = 0
				end

				if btn(3) then
					btn_vector[4] = 1
					time_held+=1
					if time_held > 20 and plr.has_charge then
						plr.charge_j = true
					end
				else
					time_held = 0
					if plr.charge_j == true then
						plr.dy -=5
						plr.on_ground = false
						plr.j_left -=1
						plr.charge_j = false
					end
				end

				if btn(4) and plr.has_grapple and not plr.grapple then
					plr.grapple = true
					plr.grapple_tick = 0
					if btn_vector[1] == 1 then
						plr.grapple_dir[1] = -3
					end
					if btn_vector[2] == 1 then
						plr.grapple_dir[1] = 3
					end
					if btn_vector[3] == 1 then
						plr.grapple_dir[2] = -3
					end
					if btn_vector[4] == 1 then
						plr.grapple_dir[2] = 3
					end

					if plr.grapple_dir[1] == 0 and plr.grapple_dir[2] == 0 then
						plr.grapple_dir[2] = -3
						plr.grapple_dir[1] = 3 * sgn(plr.dx)
					end


					if plr.grapple_dir[1] ~= 0 and plr.grapple_dir[2]~= 0 then
						plr.grapple_dir[1] = plr.grapple_dir[1]/2
						plr.grapple_dir[2] = plr.grapple_dir[2]/2
					end
				end

				if plr.grapple then
					plr.grapple_tick +=1
					plr.grapple_x = plr.x + (plr.grapple_dir[1]*plr.grapple_tick)
					plr.grapple_y = plr.y + (plr.grapple_dir[2]*plr.grapple_tick)
					if plr.grapple_x < 0 or plr.grapple_x > 128 or plr.grapple_y < 0 or plr.grapple_y > 128 then
						plr.grapple = false
					else
						if solid_collision(plr.grapple_x,plr.grapple_y) then
							plr.j_left += 1
							plr.g_success = true
							plr.weighted = false
							plr.grapple = false
						elseif plr.grapple_tick > 30 then
							grapple_tick = 0
							plr.grapple = false
							plr.g_success = false
							plr.grapple_dir = {0,0}
						end
					end
				end

				if plr.g_success then
					plr.dx = plr.grapple_dir[1]
					plr.dy = plr.grapple_dir[2]
					plr.weighted = false
				end


				physics_update()
				move(plr)
			end
			plr.spr_update()
		end,
		spr_update = function()
			plr.ticker += 0.5

			if plr.dx < 0 then
				plr.face_r = true
			elseif plr.dx > 0 then
				plr.face_r = false
			end

			if plr.gonext then
				if plr.ticker >= 30 then
					if plr.ticker % 10 == 0 then
						plr.dy = -2
					end
				else
					plr.sprite = sprites.running
					plr.face_r = false
					plr.x+=1
					if plr.x > 128 then
						plr.gonext = false
						next_level()
					end
				end
				plr.ticker-=1

			elseif plr.respawning then
				plr.controllable = false
				plr.sprite = sprites.spawn
				local change = flr(plr.ticker/3)
				plr.sprite += change
				if plr.ticker > 10 then
					plr.respawning = false
					plr.controllable = true
				end
			elseif plr.on_wall then
				plr.sprite = sprites.sliding-- + modifier
			elseif not plr.on_ground and not plr.on_wall then
				if abs(plr.dx) > 0 and plr.dy < -.5 then
					plr.sprite = sprites.jumping-- + --modifier
				else
					plr.sprite = sprites.falling-- + --modifier
				end
			else

				if abs(plr.dx) > 0 then
					plr.sprite = sprites.running-- + modifier
				else
					if plr.charge_j then
						if plr.ticker %5 > 2 then
							plr.sprite = sprites.charge
						else
							plr.sprite = sprites.standing-- + modifier
						end
					else
						plr.sprite = sprites.standing-- + modifier
					end
				end

				if plr.ticker > 10 then
					if plr.ticker < 20 then
						plr.sprite += 1
					else
						plr.ticker = 0
					end
				end

			end
		end,
		draw = function()
			if plr.grapple then
		 	line(plr.x+4,plr.y+4, plr.grapple_x, plr.grapple_y+4, 12)
			end
			if plr.clr == "red" then
			 pal(12,14)
			elseif plr.clr == "yellow" then
			 pal(12,10)
			end
			spr(plr.sprite,plr.x,plr.y,1,1,plr.face_r)
   pal()

		end
		}

		create_classes()
		parts = {}
		clouds = {}
		on_map={}

		for c = 0,40 do
			parts[c] = make_snow()
		end

		for z = 1,7 do
			clouds[z] = make_cloud()
		end
end





-->8
--draw and update

function _draw()
	--rectfill(0,0,128,128,0)
	if screen == "controls" then
		cls()
		rectfill(0,0,128,128,0)
		print("use the arrow keys to move/jump",0,10,7)
		print("hold up arrow for a longer jump",0,30,7)
		print("tap for a shorter jump",0,40,7)
		print("use the x key to sprint",0,60,7)
		print("yellow paint lowers gravity",0,80,7)
		print("red paint increases friction",0,90,7)
		print("press x to continue to the game",0,110,7)
	elseif screen == "victory" then
  cls()
		print("congratulations!",30,30,7)
		print("you beat the demo!",27,60,7)
 else

		cls()

		--palt(0,false)

		rectfill(0,0,128,128,1)

		if world == 1 then
			foreach(clouds,function(cloud)
				spr(sprites.cloud,cloud.x,cloud.y,2,1)
			end)
		end

		map((level-1)*16,(world-1)*16,0,0,16,16,1)

		if plr.clr == "red" then
			pal(12,14)
		end
		--spr(plr.sprite,plr.x,plr.y,1,1,plr.face_r)
		plr.draw()
		pal()
		--draw every object on the map
		foreach(on_map,function(obj)
			obj.type.draw(obj)
		end)
		--draw snow/sand
		if world == 2 then
			for i = 1,#parts do
				local temp = parts[i]
				rectfill(temp.x,temp.y,temp.x+0.5,temp.y+0.5,7)
			end
		end

		--uncomment to debug

		--print("wall_jumps: "..plr.wall_jumps,10,10,7)
		--print(plr.grapple_x..","..plr.grapple_y,16,16,8)
		--print(#on_map,20,20,5)
		--print(wall_x,30,30,5)
	end
end

function _update()

 if world == 2 and level == 3 then
		screen = "victory"
	end
	if screen == "controls" then
		if btn(5) then
			screen = "game"
		end
	else
		plr.update()

		--call the update function
		--for any object on the map
		foreach(on_map,function(obj)
			move(obj)
			if obj.type.update ~= nil then
				obj.type.update(obj)
			--	checkx = "updating "..obj.type.tile
			end
		end)

		if not plr.gonext and fget(mget((plr.x+(level-1)*128)/8,(plr.y+(world-1)*128)/8),goal_flag) then
			plr.gonext = true
			plr.ticker = 59
			plr.dx = 0
			plr.dy = 0
		end


		physics_update()
		part_tick +=1
		particle_update()
		clouds_update()
	end
end
-->8
--collision checking and physics
function move(obj)
	startx = obj.x
	starty = obj.y
	local x_ofst = 0
	local y_ofst = 0

	local realx = obj.x + (level-1)*128
	local realy = obj.y + (world-1)*128

	--attempt to change dy
	if obj.weighted then
		obj.dy+=gravity
		if plr.clr == "yellow" then
			printh("yo")
   obj.dy-=.10
		end
	end

	if obj.dx == 0 and obj.dy == 0 then
		return
	end

	--attempt to move in x direction
	obj.x += obj.dx

	if obj.x < 0 then
		obj.x = 0
	end

	if obj.dx > 0 then
		x_ofst = obj.w
	end

	--get the object at center y, x + offset
	local obj_at = mget((realx+x_ofst)/8,(realy+4)/8)


	--if they touch a paint bucket
	--change color and stats


	--if theres an object where this would move us
	--go back to where we started in terms of x
	if solid_collision(realx+x_ofst,realy+4) then

		if obj.is_player and obj.g_success then
			obj.g_success = false
			obj.grapple_dir = {0,0}
			obj.grapple_tick = 0
			obj.weighted = true
		end

		if obj.dx > 0 then
			jump_from = "right"
			obj.x = flr((obj.x)/8)*8
		elseif obj.dx < 0 then
			jump_from = "left"
			obj.x = flr((obj.x+8)/8)*8
		end

		obj.dx = 0
		if obj.weighted then
			--this is bad but we'll try it
			if obj.is_player then
				if not obj.on_ground then
					if fget(obj_at,wall_flag) then
						obj.on_wall = true
						wall_x = obj.x
						if obj.wall_jumps > 0 then
							obj.j_left += 1
							obj.wall_jumps -=1
						end
					else
						obj.on_wall = false
					end
				end
			end
		end
	end

	obj.y += obj.dy

	realy = obj.y + (world-1)*128

	if obj.dy > 0 then
		y_ofst = 7
	end

	--get object at where we'd fall to, center of player
	--obj_at = mget((plr.x+4+(level-1)*128)/8,(plr.y+y_ofst)/8)

 if solid_collision(realx+4,realy+y_ofst) then
	--if fget(obj_at,0) then
		--gets the top of the object that we're hitting

		if obj.is_player and obj.g_success then
			obj.g_success = false
			obj.grapple_dir = {0,0}
			obj.grapple_tick = 0
			obj.weighted = true
		end

		--if we were moving down
		if obj.dy > 0 then
			obj.y = flr(obj.y/8)*8


			--stops our movement
			obj.dy = 0
			--we're on the ground
			if obj.weighted then
				if obj.is_player then
					obj.on_ground = true
					if obj.j_left < obj.max_jump then
						obj.j_left = obj.max_jump
						obj.wall_jumps = 1
					end
				end
			end
		end

		if obj.dy < 0 then
			obj.y = flr((obj.y+8)/8)*8
			obj.dy = 0
		end

	end

	--now we've finished moving,
	--check for other stuff


 --if player touches deadly object such as spikes
	--die and restart the level

	if obj.is_player then
		if deadly_collision(realx+x_ofst,realy+y_ofst) then
			--respawn
				plr.respawn()
				--destroy enemy
				-- not sure if this will be
				--implemented
		--for paint and power ups
		elseif flag_collision(realx+x_ofst,realy+y_ofst, power_flag) then
			gain_power(realx+x_ofst,realy+y_ofst, obj_at)
		end
	end

end

function gain_power(nx,ny,spr)
	if spr == 116 then
		mset(nx/8,ny/8,0)
		if world == 1 then
			plr.has_charge = true
		elseif world == 2 then
			plr.has_grapple = true
		elseif world == 3 then
			plr.has_double = true
		end
	--WIP, need to decide what paint powers will be
	elseif spr == 85 then
		plr.clr = "red"
		g_friction = .80
	elseif spr == 86 then
		plr.clr = "blue"
		g_friction = .95
	elseif spr == 87 then
		plr.clr = "yellow"
		g_friction = .95
	end
end

function deadly_collision(nx,ny)
 local x_change = 0
 local y_change = 0
	if plr.dy <= 0 then
		y_change = 4
	end
	if plr.dx >= 0 then
		x_change = -3
	elseif plr.dy <= 0 then
  x_change = 3
 end
 return flag_collision(nx+x_change,ny+y_change,deadly_flag) or deadly_obj_at((nx+x_change)-(level-1)*128,(ny+y_change)-(world-1)*128)
end

function solid_collision(nx,ny)
	return flag_collision(nx,ny,solid_flag) or solid_obj_at(nx-(level-1)*128,ny-(world-1)*128)
end

function flag_collision(nx,ny,flag)
	local obj_at = mget(nx/8,ny/8)
	if fget(obj_at,flag) then
		return true
	end
end

function deadly_obj_at(nx,ny)
	local tempobj = get_obj_at(nx,ny)
	if tempobj~= nil then
		if tempobj.deadly then
			return true
		end
	end
	return false
end

function solid_obj_at(nx,ny,dy)
	local tempobj = get_obj_at(nx,ny)

	if tempobj ~= nil then
		if tempobj.solid then
			return true
		end
	end

	return false
end

function get_obj_at(nx,ny)
	local tempobj = nil
	foreach(on_map,function(obj)

		local leftx = obj.x
		local rightx = obj.x+obj.w
		local upy = obj.y
		local lowy = obj.y+obj.h

		if leftx <= nx and nx <= rightx then
			if upy <= ny and ny <= lowy then
				tempobj = obj
			end
		end

	end)

	return tempobj
end

function physics_update()

	if plr.j_left > plr.max_jump then
		plr.j_left = plr.max_jump
	end

	if plr.on_wall then
		local dist = abs(plr.x - wall_x)
		if dist > 3 then
			plr.on_wall = false
			wall_x = 0
		end
	end

	if plr.on_ground then
		plr.on_wall = false
		plr.dx *= g_friction
	else
		plr.dx *= a_friction
	end

	if plr.on_wall and plr.dy > 0 then
		gravity = .1
	else
		gravity = .25
	end

	if abs(plr.dx) > plr.max_dx then
		if plr.dx > 0 then
			plr.dx = plr.max_dx
		else
			plr.dx = -plr.max_dx
		end
	end

	if abs(plr.dx) < 0.1 then
		plr.dx = 0
	end

end




-->8
--cosmetics
function make_snow()
	local start = flr(rnd(128))+1
	snow = {
		x = 0,
		y = start,
		starty = start,
		height = flr(rnd(13))+2,
		spd = rnd(2)+1,
		start_tick = part_tick
		}
	return snow
end

function make_cloud()
	local start = flr(rnd(42))
	cld = {
		x = 0,
		y = start,
		starty = start,
		spd = rnd(0.5),
		start_tick = part_tick
		}
	return cld
end

function clouds_update()
	for i = 1,#clouds do
		clouds[i].x+=clouds[i].spd
		if clouds[i].x > 128 then
			clouds[i] = make_cloud()
		end
	end
end

function particle_update()
	for i = 1,#parts do
		parts[i].x+=parts[i].spd
		parts[i].y = parts[i].starty + parts[i].height*sin((part_tick-parts[i].start_tick)/50)
		if parts[i].x > 128 then
			parts[i] = make_snow()
		end
	end
	if part_tick > 100 then
		part_tick = 0
	end
end

-->8
--interactive objects

function create_classes()
	break_block = {
		tile = 77,
		init = function(this)
			this.solid = true
			this.state = 0
			this.ticker = 0
			this.sprite = 77
		end,
		draw = function(this)
			if this.state ~= 2 then
				spr(this.sprite,this.x,this.y)
			end
		end,
		update = function(this)
			if this.state == 0 then
				this.solid = true
				this.sprite = 77

				if obj_in_range(plr,this.x,this.y-1,8,1) then
					this.state = 1
					this.ticker = 40
				end
			elseif this.state == 1 then
				this.sprite = 78
				if this.ticker > 0 then
					this.ticker -= 1
					if this.ticker< 20 then
						this.sprite = 79
					end
				else
					this.state = 2
					this.solid = false
					this.ticker = 100
				end
			else
				if this.ticker > 0 then
					this.ticker-=1
				else
					this.state = 0
				end
			end
		end
	}
	add(classes,break_block)

	icicle = {
		tile = 93,

		init = function(this)
			this.state = 0
			this.deadly = true
			this.sprite = 93
			this.weighted = false
			this.ticker = 0
			this.is_player = false
			this.solid = false
		end,

		draw = function(this)
			spr(this.sprite,this.x,this.y)
		end,

		update = function(this)

			local rx = this.x + (level-1)*128
			local ry = this.y + (world-1)*128

			if this.state == 0 then
				if abs(plr.x - this.x) < 10 then
					--dont want to start falling until theyre on the right level
					local result = false
					for k = 3,flr((plr.y-this.y)/4) do
						if solid_collision(rx+4,(world-1)*128+plr.y-k*4) then
							result = true
						end
					end

					if not result then

						this.state = 1
						this.sprite = 94
						this.weighted = true
					end
				end
			elseif this.state == 1 then
				if solid_collision(rx+4,ry+9 ) then
					this.sprite = 95
					this.state = 2
					--this.deadly = false
					this.dy = -2
					this.y -=3
				end
			else
				if solid_collision(rx +4,ry+9 ) then
					destroy_object(this)
				end
			end
		end
		}
		add(classes,icicle)

		move_platform = {

		tile = 110,

		init = function(this)
			this.solid = true
			this.dir = sgn(rnd(2)-1)
			this.h = 4
			this.w = 16
		end,

		update = function(this)

			local rx = this.x + (level-1)*128
			local ry = this.y + (world-1)*128

			if plr.dy < 0 then
				this.solid = false
			else
				this.solid = true
			end

			local xoff = -1

			if this.dir > 0 then
				xoff = 17
			end

			this.x+=this.dir

			if solid_collision(rx+xoff+this.dir,ry) then
				this.dir*=-1
			elseif this.x+this.w > 128 or this.x < 0 then
				this.dir*=-1
			end

			if obj_in_range(plr,this.x,this.y-1,16,1) then
				plr.x+=this.dir
			end


		end,

		draw = function(this)
			spr(110,this.x,this.y,2,1)
		end

		}

		add(classes,move_platform)

end

function create(x,y,class)
	obj = {}
	obj.type = class
	obj.x = x
	obj.y = y
	obj.w = 8
	obj.h = 8
	obj.dx = 0
	obj.dy = 0
	obj.solid = true

	add(on_map,obj)
	if obj.type.init ~= nil then
		obj.type.init(obj)
	end
	return obj
end

function destroy_object(this)
	del(on_map,this)
end

function obj_in_range(obj,x,y,w,h)

	--have to implement height

	local leftx = obj.x
	local rightx = obj.x+obj.w
	local upy = obj.y
	local lowy = obj.y+obj.h

	for cx = x,x+w-1 do
		if leftx <= cx and cx <= rightx then
			if upy <= y and y <= lowy then
				return true
			end
		end
	end
end
-->8
--misc functions

function start_room()
	for i = 0,15 do
		for j = 0,15 do
			local temp_tile = mget(i+(level-1)*16,j+(world-1)*16)
			for k = 1,#classes do
				local typ = classes[k]
				if typ.tile == temp_tile then
					create(i*8,j*8,typ)
				end
			end
		end
	end
end

function next_level()
	on_map = {}
	level+=1
	if level > 4 then
		level = 1
		world+=1
	end

	start_room()
	plr.respawn()
end
__gfx__
00000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e0000000000000007772277777722777
00000000000cc000000000000000ccc000c0000000077000000000000000000000000000000ee000000000000000eee000e00000000000007722227777222277
0070070000cccc00000cc000000cccccc000ccc00077770000077000000000000000000000eeee00000ee000000eeeeee000eee0000000007700a077770a0077
000770000cccccc000cccc0000cc8ccc000ccccc077777700077770000000000000000000eeeeee000eeee0000ee8eee000eeeee000000002222222222222222
00077000cc8cc8cc0cccccc00ccccc8c00cc8ccc77877877077777700000000000000000ee8ee8ee0eeeeee00eeeee8e00ee8eee000000007330303773030337
00700700cccccccccc8cc8cc0ccccccc0ccccc8c77777777778778770000000000000000eeeeeeeeee8ee8ee0eeeeeee0eeeee8e000000007333033773303337
000000000cccccc0cccccccc0cccccc00ccccccc077777707777777700000000000000000eeeeee0eeeeeeee0eeeeee00eeeeeee000000007333333773333337
0000000000cccc000cccccc000cccc0000ccccc00077770007777770000000000000000000eeee000eeeeee000eeee0000eeeee0000000007330003773000337
000000000000cc00000000000000000c00000cc0000000000000000000000000000000000000ee00000000000000000e00000ee0000000000000000000000000
000000000000cc000000cc00000000cc0000cccc000000000000000000000000000000000000ee000000ee00000000ee0000eeee000000000000000000000000
00000000000cccc0000cccc00000008c000cc8cc00000000000cc0000000000000000000000eeee0000eeee00000008e000ee8ee000000000000000000000000
00000000000cccc000c8c8c000000ccc00cccccc000cc00000cccc000000000000000000000eeee000e8e8e000000eee00eeeeee000000000000000000000000
0000000000c8cc8c0cccccc000000ccc00cccccc00cccc000c8cc8c0000000000000000000e8ee8e0eeeeee000000eee00eeeeee000000000000000000000000
0000000000cccccc0ccccc000000008c000cc8cc00cccc000cccccc0000000000000000000eeeeee0eeeee000000008e000ee8ee000000000000000000000000
00000000000cccc0ccccc000000000cc0000cccc0000000000cccc000000000000000000000eeee0eeeee000000000ee0000eeee000000000000000000000000
00000000000cccc0cccc00000000000c00000cc000000000000000000000000000000000000eeee0eeee00000000000e00000ee0000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000cc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000cc00000cccc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000cc00000cccc000c8cc8c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000cc00000cccc000cccccc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000cccc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44444444b33bbb3bb333bb33666666660000000055555555555555550088800005b3000043344444b55544440aaa000aa0000aa09a999a999a099a9900000000
400000043bb33b3b3bbb333b6555555600000000555555555555555508888000005b30004b344444bb355444000a00aaaa00a0009aa99aa99a009aa900000a00
40444404b3b3b3b3333b33b36555555660066006dd5555dd5555555588a880000535b30043b444444bb3554400000aaaaaa0000a9a9999999a90990000009900
4040040444444444b333b333655665565005500555566555555555558888800003bb300035444444444b3344aa00aaaaaaaa00aaaa999999aa90000900000009
4040040445455544bb3333b3655665565555555555566555555555550008800005b3000043b44444444b3444000aaaaaaaaaa000999aa9aa999aa0aa099aa0a0
404444044444454433bbbbb36555555655555555dd5555dd555555550008800005b30000445b4444bbbb344400aaaaaaaaaaaa009999aaaa9990000a09900000
4000000444544545b333333365555556555555555555555555555555000880005b30000043b34443355b34440aaaaaaaaaaaaaa0aa999999a000990900000000
44444444444444443b3bb3bb6666666655555555555555555555555500088000b30000003334444b33353355aaaaaaaaaaaaaaaaa99999aaa099990a00090000
444444440000000000000000000000000006600000000000000000000000000053bb00003bb44bbb4435bb35aaaaaaaaaaaaaaaa06cccc600000000000000000
4444444400000000000000000000000000066000005555500055555000555550553b000033b4bb4444435b330aaaaaaaaaaaaaa006cccc600000000000000000
44444444000000000000000000000000006556000588888505ccccc505aaaaa5053bb00055333bbb44433bb300aaaaaaaaaaaa00006cc60006cccc6000006000
444444440000000000000000000000000065560005588855055ccc55055aaa550553b0004555533bb444b4bb000aaaaaaaaaa000006cc60006cccc600006c600
44444444000000000000000000000000006556000055555000555550005555500053bb0044445553b4bb3444aa00aaaaaaaa00aa000cc000006cc6000006cc60
444444440000000000000000000000000655556000555550005555500055555000553b0044444453bb333444a0000aaaaaa0000000066000006cc600006cccc6
44444444000000003333333300000000065555600005550000055500000555000053bb004444443344444444000a00aaaa00a00000000000000cc000006cc660
4444444400000033333333333300000056555565000000000000000000000000053bb00044444433b4444444000a000aa0000a00000000000006600000666000
0b0b0b0b0000333333333333333300005655556500000077770000000000088888800000777777777777777777777777ccccccccccccccc70aaaaaaaaaaaaaa0
b3b3b3b300033333333333333333300006555560000007777770000000008eeeeee80000777cccccccccc777777cc777ccccccccccccccc7aaaaaaaaaaaaaaaa
333333330033333333333333333333000065560000070777777070000008e000000e800077cc77ccccc7cc7777cccc77ccccccccccccccc7aaaaaaaaaaaaaaaa
b3b3b3b3033333333333333333333330006556000077777777777700008e00000000e8007ccc77ccccccccc77cccccc7ccccccccccccccc70aaaaaaaaaaaaaa0
bbbbbbbb03333333333333333333333000655600077777777777777008e0000000000e807cccccccccccccc77cccccc7ccccccccccccccc70000000000000000
05b300000033333333333333333333000006600077777777777777778e000000000000e87ccccccccc77ccc777cccc77ccccccccccccccc70000000000000000
005b30000003333333333333333330000006600007777777777777708e000000000000e87ccc7ccccc77ccc7777cc777ccccccccccccccc70000000000000000
0535b3000000333333333333333300000006600000777777777777008e000000000000e87cccccccccccccc77777777777777777ccccccc70000000000000000
0b0b0b0b0000000000000000000000000000000000000000000000008e000000000000e87cccccccccccccc777777777cccccccc7ccccccc0000000000000000
b3b3b3b300000000000000000000000000aaaa0066600000000006668e000000000000e87cccc77ccccc7cc7cccccccccccccccc7ccccccc0000000000000000
333333330000000000000000000000000aaaaaa055566600006665558e000000000000e87cccc77cccccccc7cccccccccccccccc7ccccccc0000000000000000
b3b3b3b30000000000000000000000000aaaaaa0555555666655555508e0000000000e807cc7ccccc77cccc7cccccccccccccccc7ccccccc0000000000000000
bbbbbbbb00000000000000000000000000aaaa005556660000666555008e00000000e8007cccccccc77cccc7cccccccccccccccc7ccccccc0000000000000000
00000000000000000000000000000000000aa00066600000000006660008e000000e800077cccccccccccc77cccccccccccccccc7ccccccc0000000000000000
0000000000000000000000000000000000066000000000000000000000008eeeeee80000777cccccccccc777cccccccccccccccc7ccccccc0000000000000000
0000000000000000000000000000000000000000000000000000000000000888888000007777777777777777cccccccccccccccc7ccccccc0000000000000000
c7c7c7c7c7c7c7c7c7c7c7c7c7c7b7a6c7c7c7c7c7c7c7a70000000000d7d6000000000000000000000000000000000000000000000000000085000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000c7c7c7c7c7c7c7000000000000000000000000000000000000000000000000000000000000000000000000000000000024000084000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000084000085000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000085000084000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000084000085000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000085000084000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000084000085000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000085000084000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000065000084000055008545454584454585000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000024242424242424242424242424242424000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000014141414141414141414141414141414000000000000
__gff__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003030707030707810107070101000000030101010911111101070701010000000301010109000000000707070707000003000000110909000007070707070000
0000000000000000000707070700000000000000000000000007070707000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000004b4c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
52525300000000000000005b5c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6262630000000000000000000000470000000000000000005454000000000047000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
494a000000000000000000000000494a4a000042420000424242420000424242000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
595a000000000000000000000000595a5a000000000000000000000000000000000054000042424242424242000000490000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
494a000000000000000000004242494a4a000000000000000000000000000000000042000048000000000000000000590000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
595a00000042000042000042595a595a5a424200000000000000000000000000000048000054000000000000000000490000000000000000560000000047000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
494a000000480000580000000000494a4a00000000000000000000000000515200005800004200006e0000000000005974000000420000004200000000494a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
595a000000580000480000000000595a5a0000006e00000000000000000061620000540000580000000000005454544942420000000000000000000000595a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
494a000000480000580000000000494a000000000000000000005454000000490000420000480000424200007070705900000000000000000000000076494a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
595a424242424242424242000000595a00000000000000006070707060000059000048000054000000000000000000490000000000006e000000000000595a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000048000000480000000000494a0000000000000000480000004800004900005800004200000000006e0000005900000000000000767500000000494a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000058000000580000000000595a00000000000000005800000058005759005648000058000000000000000000490000006e000000000000000000595a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
42424242424242424242424242424242424242000000004242420000484242424242420000480000000000000000475956550000000000000000000076494a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4141414141414141414141414141414141414100000000414141000058414141414100000058000000000000000070494141415454546e000000000000595a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c6c6c7a000000000000005600000047000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c7c000000000000796c6c6c6c6c6c6c6c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7c7c7c6c6c6c6c6c6c6c6c6c6c6c6c6c7c000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7c7c6d5d5d5d5d5d5d5d5d5d000000007d000000000000000000006e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7c7c6d000000000000000000000000007d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6c6c7a000000000000000000000047007d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000697c7d000000000000000000000000000055000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000007d7c7d00000000000000000000000000697b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7b7b6a0000000000000000000000796c7d00000000000000000000000000796c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7c7c6d00000000696a0000696a00000000000000000054000000000000005d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7c7c6d00000000797a0000797a0000000000000000697b6a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6c6c7a0000000000005454000000000000000000007d7c6d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000697b7b7b7b7b7b6a000000000000007d7c6d0000000000696a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000697c7c7c7c7c7c7c6d000000000000007d7c6d00000000007d6d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
697b7b7b7b7c7c7c7c7c7c7c7c6d000000560000007d7c6d00000000007d6d00000000000000000000000000000000000000000000000000004700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7c7c7c7c7c7c7c7c7c7c7c7c7c6d5454697b7b7b7b7c7c6d00000000007d6d00000000000000000000000000000000000000000000000000004200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
